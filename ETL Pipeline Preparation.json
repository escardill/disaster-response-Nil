{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ETL Pipeline Preparation\n",
    "Follow the instructions below to help you create your ETL pipeline.\n",
    "### 1. Import libraries and load datasets.\n",
    "- Import Python libraries\n",
    "- Load `messages.csv` into a dataframe and inspect the first few lines.\n",
    "- Load `categories.csv` into a dataframe and inspect the first few lines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sqlalchemy import create_engine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message</th>\n",
       "      <th>original</th>\n",
       "      <th>genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Weather update - a cold front from Cuba that c...</td>\n",
       "      <td>Un front froid se retrouve sur Cuba ce matin. ...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Is the Hurricane over or is it not over</td>\n",
       "      <td>Cyclone nan fini osinon li pa fini</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Looking for someone but no name</td>\n",
       "      <td>Patnm, di Maryani relem pou li banm nouvel li ...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>says: west side of Haiti, rest of the country ...</td>\n",
       "      <td>facade ouest d Haiti et le reste du pays aujou...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                            message  \\\n",
       "0   2  Weather update - a cold front from Cuba that c...   \n",
       "1   7            Is the Hurricane over or is it not over   \n",
       "2   8                    Looking for someone but no name   \n",
       "3   9  UN reports Leogane 80-90 destroyed. Only Hospi...   \n",
       "4  12  says: west side of Haiti, rest of the country ...   \n",
       "\n",
       "                                            original   genre  \n",
       "0  Un front froid se retrouve sur Cuba ce matin. ...  direct  \n",
       "1                 Cyclone nan fini osinon li pa fini  direct  \n",
       "2  Patnm, di Maryani relem pou li banm nouvel li ...  direct  \n",
       "3  UN reports Leogane 80-90 destroyed. Only Hospi...  direct  \n",
       "4  facade ouest d Haiti et le reste du pays aujou...  direct  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# load messages dataset\n",
    "messages = pd.read_csv('messages.csv')\n",
    "messages.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load categories dataset\n",
    "categories = pd.read_csv('categories.csv')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>categories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-1;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>related-1;request-1;offer-0;aid_related-1;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                         categories\n",
       "0   2  related-1;request-0;offer-0;aid_related-0;medi...\n",
       "1   7  related-1;request-0;offer-0;aid_related-1;medi...\n",
       "2   8  related-1;request-0;offer-0;aid_related-0;medi...\n",
       "3   9  related-1;request-1;offer-0;aid_related-1;medi...\n",
       "4  12  related-1;request-0;offer-0;aid_related-0;medi..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categories.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Merge datasets.\n",
    "- Merge the messages and categories datasets using the common id\n",
    "- Assign this combined dataset to `df`, which will be cleaned in the following steps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message</th>\n",
       "      <th>original</th>\n",
       "      <th>genre</th>\n",
       "      <th>categories</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Weather update - a cold front from Cuba that c...</td>\n",
       "      <td>Un front froid se retrouve sur Cuba ce matin. ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Is the Hurricane over or is it not over</td>\n",
       "      <td>Cyclone nan fini osinon li pa fini</td>\n",
       "      <td>direct</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-1;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Looking for someone but no name</td>\n",
       "      <td>Patnm, di Maryani relem pou li banm nouvel li ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>direct</td>\n",
       "      <td>related-1;request-1;offer-0;aid_related-1;medi...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>says: west side of Haiti, rest of the country ...</td>\n",
       "      <td>facade ouest d Haiti et le reste du pays aujou...</td>\n",
       "      <td>direct</td>\n",
       "      <td>related-1;request-0;offer-0;aid_related-0;medi...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                            message  \\\n",
       "0   2  Weather update - a cold front from Cuba that c...   \n",
       "1   7            Is the Hurricane over or is it not over   \n",
       "2   8                    Looking for someone but no name   \n",
       "3   9  UN reports Leogane 80-90 destroyed. Only Hospi...   \n",
       "4  12  says: west side of Haiti, rest of the country ...   \n",
       "\n",
       "                                            original   genre  \\\n",
       "0  Un front froid se retrouve sur Cuba ce matin. ...  direct   \n",
       "1                 Cyclone nan fini osinon li pa fini  direct   \n",
       "2  Patnm, di Maryani relem pou li banm nouvel li ...  direct   \n",
       "3  UN reports Leogane 80-90 destroyed. Only Hospi...  direct   \n",
       "4  facade ouest d Haiti et le reste du pays aujou...  direct   \n",
       "\n",
       "                                          categories  \n",
       "0  related-1;request-0;offer-0;aid_related-0;medi...  \n",
       "1  related-1;request-0;offer-0;aid_related-1;medi...  \n",
       "2  related-1;request-0;offer-0;aid_related-0;medi...  \n",
       "3  related-1;request-1;offer-0;aid_related-1;medi...  \n",
       "4  related-1;request-0;offer-0;aid_related-0;medi...  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# merge datasets\n",
    "df = pd.merge(messages, categories)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26248, 2)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categories.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26386, 5)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Split `categories` into separate category columns.\n",
    "- Split the values in the `categories` column on the `;` character so that each value becomes a separate column. You'll find [this method](https://pandas.pydata.org/pandas-docs/version/0.23/generated/pandas.Series.str.split.html) very helpful! Make sure to set `expand=True`.\n",
    "- Use the first row of categories dataframe to create column names for the categories data.\n",
    "- Rename columns of `categories` with new column names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>31</th>\n",
       "      <th>32</th>\n",
       "      <th>33</th>\n",
       "      <th>34</th>\n",
       "      <th>35</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-1</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-1</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-1</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-1</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-1</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-1</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          0          1        2              3               4   \\\n",
       "0  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "1  related-1  request-0  offer-0  aid_related-1  medical_help-0   \n",
       "2  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "3  related-1  request-1  offer-0  aid_related-1  medical_help-0   \n",
       "4  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "\n",
       "                   5                    6           7           8   \\\n",
       "0  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "1  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "2  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "3  medical_products-1  search_and_rescue-0  security-0  military-0   \n",
       "4  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "\n",
       "              9        ...                    26                      27  \\\n",
       "0  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "1  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "2  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "3  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "4  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "\n",
       "                  28        29       30      31            32      33  \\\n",
       "0  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "1  weather_related-1  floods-0  storm-1  fire-0  earthquake-0  cold-0   \n",
       "2  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "3  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "4  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "\n",
       "                34               35  \n",
       "0  other_weather-0  direct_report-0  \n",
       "1  other_weather-0  direct_report-0  \n",
       "2  other_weather-0  direct_report-0  \n",
       "3  other_weather-0  direct_report-0  \n",
       "4  other_weather-0  direct_report-0  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create a dataframe of the 36 individual category columns\n",
    "categories = categories['categories'].str.split(pat=';', expand=True)\n",
    "categories.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "categories = df['categories'].str.split(pat=';',expand=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['related', 'request', 'offer', 'aid_related', 'medical_help', 'medical_products', 'search_and_rescue', 'security', 'military', 'child_alone', 'water', 'food', 'shelter', 'clothing', 'money', 'missing_people', 'refugees', 'death', 'other_aid', 'infrastructure_related', 'transport', 'buildings', 'electricity', 'tools', 'hospitals', 'shops', 'aid_centers', 'other_infrastructure', 'weather_related', 'floods', 'storm', 'fire', 'earthquake', 'cold', 'other_weather', 'direct_report']\n"
     ]
    }
   ],
   "source": [
    "# select the first row of the categories dataframe\n",
    "row =  categories.iloc[0]\n",
    "\n",
    "\n",
    "# use this row to extract a list of new column names for categories.\n",
    "# one way is to apply a lambda function that takes everything \n",
    "# up to the second to last character of each string with slicing\n",
    "category_colnames = list(row.str.split('-').str[0].values)\n",
    "print(category_colnames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>related</th>\n",
       "      <th>request</th>\n",
       "      <th>offer</th>\n",
       "      <th>aid_related</th>\n",
       "      <th>medical_help</th>\n",
       "      <th>medical_products</th>\n",
       "      <th>search_and_rescue</th>\n",
       "      <th>security</th>\n",
       "      <th>military</th>\n",
       "      <th>child_alone</th>\n",
       "      <th>...</th>\n",
       "      <th>aid_centers</th>\n",
       "      <th>other_infrastructure</th>\n",
       "      <th>weather_related</th>\n",
       "      <th>floods</th>\n",
       "      <th>storm</th>\n",
       "      <th>fire</th>\n",
       "      <th>earthquake</th>\n",
       "      <th>cold</th>\n",
       "      <th>other_weather</th>\n",
       "      <th>direct_report</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-1</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-1</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-1</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-1</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-1</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-1</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>related-1</td>\n",
       "      <td>request-0</td>\n",
       "      <td>offer-0</td>\n",
       "      <td>aid_related-0</td>\n",
       "      <td>medical_help-0</td>\n",
       "      <td>medical_products-0</td>\n",
       "      <td>search_and_rescue-0</td>\n",
       "      <td>security-0</td>\n",
       "      <td>military-0</td>\n",
       "      <td>child_alone-0</td>\n",
       "      <td>...</td>\n",
       "      <td>aid_centers-0</td>\n",
       "      <td>other_infrastructure-0</td>\n",
       "      <td>weather_related-0</td>\n",
       "      <td>floods-0</td>\n",
       "      <td>storm-0</td>\n",
       "      <td>fire-0</td>\n",
       "      <td>earthquake-0</td>\n",
       "      <td>cold-0</td>\n",
       "      <td>other_weather-0</td>\n",
       "      <td>direct_report-0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     related    request    offer    aid_related    medical_help  \\\n",
       "0  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "1  related-1  request-0  offer-0  aid_related-1  medical_help-0   \n",
       "2  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "3  related-1  request-1  offer-0  aid_related-1  medical_help-0   \n",
       "4  related-1  request-0  offer-0  aid_related-0  medical_help-0   \n",
       "\n",
       "     medical_products    search_and_rescue    security    military  \\\n",
       "0  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "1  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "2  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "3  medical_products-1  search_and_rescue-0  security-0  military-0   \n",
       "4  medical_products-0  search_and_rescue-0  security-0  military-0   \n",
       "\n",
       "     child_alone       ...           aid_centers    other_infrastructure  \\\n",
       "0  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "1  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "2  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "3  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "4  child_alone-0       ...         aid_centers-0  other_infrastructure-0   \n",
       "\n",
       "     weather_related    floods    storm    fire    earthquake    cold  \\\n",
       "0  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "1  weather_related-1  floods-0  storm-1  fire-0  earthquake-0  cold-0   \n",
       "2  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "3  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "4  weather_related-0  floods-0  storm-0  fire-0  earthquake-0  cold-0   \n",
       "\n",
       "     other_weather    direct_report  \n",
       "0  other_weather-0  direct_report-0  \n",
       "1  other_weather-0  direct_report-0  \n",
       "2  other_weather-0  direct_report-0  \n",
       "3  other_weather-0  direct_report-0  \n",
       "4  other_weather-0  direct_report-0  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# rename the columns of `categories`\n",
    "categories.columns = category_colnames\n",
    "categories.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Convert category values to just numbers 0 or 1.\n",
    "- Iterate through the category columns in df to keep only the last character of each string (the 1 or 0). For example, `related-0` becomes `0`, `related-1` becomes `1`. Convert the string to a numeric value.\n",
    "- You can perform [normal string actions on Pandas Series](https://pandas.pydata.org/pandas-docs/stable/text.html#indexing-with-str), like indexing, by including `.str` after the Series. You may need to first convert the Series to be of type string, which you can do with `astype(str)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>related</th>\n",
       "      <th>request</th>\n",
       "      <th>offer</th>\n",
       "      <th>aid_related</th>\n",
       "      <th>medical_help</th>\n",
       "      <th>medical_products</th>\n",
       "      <th>search_and_rescue</th>\n",
       "      <th>security</th>\n",
       "      <th>military</th>\n",
       "      <th>child_alone</th>\n",
       "      <th>...</th>\n",
       "      <th>aid_centers</th>\n",
       "      <th>other_infrastructure</th>\n",
       "      <th>weather_related</th>\n",
       "      <th>floods</th>\n",
       "      <th>storm</th>\n",
       "      <th>fire</th>\n",
       "      <th>earthquake</th>\n",
       "      <th>cold</th>\n",
       "      <th>other_weather</th>\n",
       "      <th>direct_report</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 36 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   related  request  offer  aid_related  medical_help  medical_products  \\\n",
       "0        1        0      0            0             0                 0   \n",
       "1        1        0      0            1             0                 0   \n",
       "2        1        0      0            0             0                 0   \n",
       "3        1        1      0            1             0                 1   \n",
       "4        1        0      0            0             0                 0   \n",
       "\n",
       "   search_and_rescue  security  military  child_alone      ...        \\\n",
       "0                  0         0         0            0      ...         \n",
       "1                  0         0         0            0      ...         \n",
       "2                  0         0         0            0      ...         \n",
       "3                  0         0         0            0      ...         \n",
       "4                  0         0         0            0      ...         \n",
       "\n",
       "   aid_centers  other_infrastructure  weather_related  floods  storm  fire  \\\n",
       "0            0                     0                0       0      0     0   \n",
       "1            0                     0                1       0      1     0   \n",
       "2            0                     0                0       0      0     0   \n",
       "3            0                     0                0       0      0     0   \n",
       "4            0                     0                0       0      0     0   \n",
       "\n",
       "   earthquake  cold  other_weather  direct_report  \n",
       "0           0     0              0              0  \n",
       "1           0     0              0              0  \n",
       "2           0     0              0              0  \n",
       "3           0     0              0              0  \n",
       "4           0     0              0              0  \n",
       "\n",
       "[5 rows x 36 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for column in categories:\n",
    "    # set each value to be the last character of the string\n",
    "    categories[column] = categories[column].astype(str).str[-1]\n",
    "    \n",
    "    # convert column from string to numeric\n",
    "    categories[column] = categories[column].astype(int)\n",
    "categories.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26386, 36)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "categories.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26386, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26248, 4)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import missingno as msno"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fc07f5e0630>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fc08696a1d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "msno.bar(df) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Replace `categories` column in `df` with new category columns.\n",
    "- Drop the categories column from the df dataframe since it is no longer needed.\n",
    "- Concatenate df and categories data frames."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message</th>\n",
       "      <th>original</th>\n",
       "      <th>genre</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Weather update - a cold front from Cuba that c...</td>\n",
       "      <td>Un front froid se retrouve sur Cuba ce matin. ...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Is the Hurricane over or is it not over</td>\n",
       "      <td>Cyclone nan fini osinon li pa fini</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Looking for someone but no name</td>\n",
       "      <td>Patnm, di Maryani relem pou li banm nouvel li ...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>says: west side of Haiti, rest of the country ...</td>\n",
       "      <td>facade ouest d Haiti et le reste du pays aujou...</td>\n",
       "      <td>direct</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                            message  \\\n",
       "0   2  Weather update - a cold front from Cuba that c...   \n",
       "1   7            Is the Hurricane over or is it not over   \n",
       "2   8                    Looking for someone but no name   \n",
       "3   9  UN reports Leogane 80-90 destroyed. Only Hospi...   \n",
       "4  12  says: west side of Haiti, rest of the country ...   \n",
       "\n",
       "                                            original   genre  \n",
       "0  Un front froid se retrouve sur Cuba ce matin. ...  direct  \n",
       "1                 Cyclone nan fini osinon li pa fini  direct  \n",
       "2  Patnm, di Maryani relem pou li banm nouvel li ...  direct  \n",
       "3  UN reports Leogane 80-90 destroyed. Only Hospi...  direct  \n",
       "4  facade ouest d Haiti et le reste du pays aujou...  direct  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# drop the original categories column from `df`\n",
    "\n",
    "df.drop('categories', axis=1, inplace=True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message</th>\n",
       "      <th>original</th>\n",
       "      <th>genre</th>\n",
       "      <th>related</th>\n",
       "      <th>request</th>\n",
       "      <th>offer</th>\n",
       "      <th>aid_related</th>\n",
       "      <th>medical_help</th>\n",
       "      <th>medical_products</th>\n",
       "      <th>...</th>\n",
       "      <th>aid_centers</th>\n",
       "      <th>other_infrastructure</th>\n",
       "      <th>weather_related</th>\n",
       "      <th>floods</th>\n",
       "      <th>storm</th>\n",
       "      <th>fire</th>\n",
       "      <th>earthquake</th>\n",
       "      <th>cold</th>\n",
       "      <th>other_weather</th>\n",
       "      <th>direct_report</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>Weather update - a cold front from Cuba that c...</td>\n",
       "      <td>Un front froid se retrouve sur Cuba ce matin. ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Is the Hurricane over or is it not over</td>\n",
       "      <td>Cyclone nan fini osinon li pa fini</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>Looking for someone but no name</td>\n",
       "      <td>Patnm, di Maryani relem pou li banm nouvel li ...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>UN reports Leogane 80-90 destroyed. Only Hospi...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12</td>\n",
       "      <td>says: west side of Haiti, rest of the country ...</td>\n",
       "      <td>facade ouest d Haiti et le reste du pays aujou...</td>\n",
       "      <td>direct</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   id                                            message  \\\n",
       "0   2  Weather update - a cold front from Cuba that c...   \n",
       "1   7            Is the Hurricane over or is it not over   \n",
       "2   8                    Looking for someone but no name   \n",
       "3   9  UN reports Leogane 80-90 destroyed. Only Hospi...   \n",
       "4  12  says: west side of Haiti, rest of the country ...   \n",
       "\n",
       "                                            original   genre  related  \\\n",
       "0  Un front froid se retrouve sur Cuba ce matin. ...  direct        1   \n",
       "1                 Cyclone nan fini osinon li pa fini  direct        1   \n",
       "2  Patnm, di Maryani relem pou li banm nouvel li ...  direct        1   \n",
       "3  UN reports Leogane 80-90 destroyed. Only Hospi...  direct        1   \n",
       "4  facade ouest d Haiti et le reste du pays aujou...  direct        1   \n",
       "\n",
       "   request  offer  aid_related  medical_help  medical_products      ...        \\\n",
       "0        0      0            0             0                 0      ...         \n",
       "1        0      0            1             0                 0      ...         \n",
       "2        0      0            0             0                 0      ...         \n",
       "3        1      0            1             0                 1      ...         \n",
       "4        0      0            0             0                 0      ...         \n",
       "\n",
       "   aid_centers  other_infrastructure  weather_related  floods  storm  fire  \\\n",
       "0            0                     0                0       0      0     0   \n",
       "1            0                     0                1       0      1     0   \n",
       "2            0                     0                0       0      0     0   \n",
       "3            0                     0                0       0      0     0   \n",
       "4            0                     0                0       0      0     0   \n",
       "\n",
       "   earthquake  cold  other_weather  direct_report  \n",
       "0           0     0              0              0  \n",
       "1           0     0              0              0  \n",
       "2           0     0              0              0  \n",
       "3           0     0              0              0  \n",
       "4           0     0              0              0  \n",
       "\n",
       "[5 rows x 40 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# concatenate the original dataframe with the new `categories` dataframe\n",
    "df = pd.concat([df, categories], axis=1)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 6. Remove duplicates.\n",
    "- Check how many duplicates are in this dataset.\n",
    "- Drop the duplicates.\n",
    "- Confirm duplicates were removed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.99355718941863114"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop_duplicates().size / df.size "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop duplicates\n",
    "df.drop_duplicates(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1048640"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check number of duplicates\n",
    "df.drop_duplicates().size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(26216, 40)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False    26216\n",
       "Name: request, dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['request'].isna().value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7. Save the clean dataset into an sqlite database.\n",
    "You can do this with pandas [`to_sql` method](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_sql.html) combined with the SQLAlchemy library. Remember to import SQLAlchemy's `create_engine` in the first cell of this notebook to use it below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine('sqlite:///NilMessages.db')\n",
    "df.to_sql('NilMessages', engine, index=False, if_exists='replace')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "database_filename = 'NilMessages'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine('sqlite:///{}.db'.format(database_filename))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 8. Use this notebook to complete `etl_pipeline.py`\n",
    "Use the template file attached in the Resources folder to write a script that runs the steps above to create a database based on new datasets specified by the user. Alternatively, you can complete `etl_pipeline.py` in the classroom on the `Project Workspace IDE` coming later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
